
# the upstream component nginx needs to connect to
upstream django {
    #server unix:/files/app.sock; # for a file socket
    #server 127.0.0.1:9808; # for a web port socket (we'll use this first)
    server unix:///tmp/uwsgi_{{cookiecutter.project_slug}}.sock;
    }

# configuration of the server
server {
    listen      80 default_server;
    charset     utf-8;

    # max upload size
    client_max_body_size 25M;   # adjust to taste

    location /static {
        expires           30d;
        alias /files/.static; # your Django project's static files - amend as required
    }
    location /favicon.ico {
        expires           30d;
        alias /files/{{cookiecutter.project_slug}}/static/images/favicon.ico;
    }
    location /media {
        expires           30d;
        alias /files/.media; # your Django project's media files - amend as required
    }

    # http://scottwb.com/blog/2013/10/28/always-on-https-with-nginx-behind-an-elb/
    # 1) Special, somewhat redundant location to always proxy
    #    the health check to the upstream server, without checking
    #    if the request came in over HTTP or HTTPS.
    location /healthcheck/ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_next_upstream error;
        #proxy_pass http://django;
        uwsgi_pass   django;
        include uwsgi_params;
        break;
      }

    # Finally, send all non-media requests to the Django server.
    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_buffering     off;
        proxy_redirect      off;
        uwsgi_pass   django;
        include uwsgi_params;
     }
}

